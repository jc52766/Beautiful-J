#+TITLE: Beautiful J
#+AUTHOR: Jason Corderoy
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-bigblow.setup
#+OPTIONS: num:nil

** Basic examples
*** Multiplication tables

#+begin_src J :exports both
  */table 1+i.12
#+end_src

#+RESULTS:
#+begin_example
┌──┬───────────────────────────────────────┐
│*/│ 1  2  3  4  5  6  7  8   9  10  11  12│
├──┼───────────────────────────────────────┤
│ 1│ 1  2  3  4  5  6  7  8   9  10  11  12│
│ 2│ 2  4  6  8 10 12 14 16  18  20  22  24│
│ 3│ 3  6  9 12 15 18 21 24  27  30  33  36│
│ 4│ 4  8 12 16 20 24 28 32  36  40  44  48│
│ 5│ 5 10 15 20 25 30 35 40  45  50  55  60│
│ 6│ 6 12 18 24 30 36 42 48  54  60  66  72│
│ 7│ 7 14 21 28 35 42 49 56  63  70  77  84│
│ 8│ 8 16 24 32 40 48 56 64  72  80  88  96│
│ 9│ 9 18 27 36 45 54 63 72  81  90  99 108│
│10│10 20 30 40 50 60 70 80  90 100 110 120│
│11│11 22 33 44 55 66 77 88  99 110 121 132│
│12│12 24 36 48 60 72 84 96 108 120 132 144│
└──┴───────────────────────────────────────┘
#+end_example

*** sum rows, columns and all value of matrices
E.g. given a 3*3 matrix sum each row, sum each column & also sum all numbers.

This may sound trivial but most languages require a non-trivial modification to code to achieve each one.

#+begin_src J :session s0 :exports both
  ]x=: 3 3 $ i.4
#+end_src

#+RESULTS:
: 0 1 2
: 3 0 1
: 2 3 0


#+begin_src J :exports both
  rs=:+/"1
  cs=:+/"2
  ts=:+/@:,
  summaryTable=: 3 : '(''row sum:'';''column sum:'';''total sum:''),.(rs;cs;ts) y'
  summaryTable x
#+end_src

#+RESULTS:
: ┌───────────┬─────┐
: │row sum:   │3 4 5│
: ├───────────┼─────┤
: │column sum:│5 4 3│
: ├───────────┼─────┤
: │total sum: │12   │
: └───────────┴─────┘

But what if we have a 3 x 3 x 3 matrix?


#+begin_src J :exports both
  ]x2=: 3 3 3 $ i.4
  summaryTable x2
#+end_src

#+RESULTS:
#+begin_example
0 1 2
3 0 1
2 3 0

1 2 3
0 1 2
3 0 1

2 3 0
1 2 3
0 1 2

┌───────────┬─────┐
│row sum:   │3 4 5│
│           │6 3 4│
│           │5 6 3│
├───────────┼─────┤
│column sum:│5 4 3│
│           │4 3 6│
│           │3 6 5│
├───────────┼─────┤
│total sum: │39   │
└───────────┴─────┘
#+end_example


** Intermediate Examples

*** A novel approach to demand optimisation
Imagine you are chopping up cattle to fulfill demand. You are limited to your choices.
E.g. you can't get 10 ribs, and if you mince the whole thing you can not then yield an eye fillet.

Approach:
- So given a demand profile (xd: each column is a unique product)
- Possible options re how to yield products form cattle carcas (xo)
- An initial random guess (xg) from xo
- Then optimizing xg to ideally match xd (bo)


#+begin_src J :exports both
  xn=:5
  xd=:(xn*80) , (xn*20) NB. demand
  xo=: (2 2)$(80 20) , (100 0) NB. options
  xg=:(xn, 2)$ ;>xn#<xo NB. sample each option evenly
  findbo=:3 : '{. vtemp #~ (<./ = ]) +/"1] | xd (-)"1 1] +/"2] ]vtemp=:}."2] y,/"_ 1]xo' NB. try each option take the best one
  bo=:findbo^:(xn) xg
  ('demand (xd):';'Options (xo):';'Guess (xg):';'Best Option (bo):'),.(xd;xo;xg;bo)
#+end_src

#+RESULTS:
#+begin_example
┌─────────────────┬───────┐
│demand (xd):     │400 100│
├─────────────────┼───────┤
│Options (xo):    │ 80 20 │
│                 │100  0 │
├─────────────────┼───────┤
│Guess (xg):      │ 80 20 │
│                 │100  0 │
│                 │ 80 20 │
│                 │100  0 │
│                 │ 80 20 │
├─────────────────┼───────┤
│Best Option (bo):│80 20  │
│                 │80 20  │
│                 │80 20  │
│                 │80 20  │
│                 │80 20  │
└─────────────────┴───────┘
#+end_example

*** Backgammon hit rate

For each distanct from opponent 1-12 approximate chances of getting hit.
E.g. Chance of getting hit given a distance of 1 is just 1-p(not getting hit) 1-5/6^2.
We could solve this mathematically for each but simulation is so fun :) 

#+begin_src J :exports both
  NB. backgammon how many squares away is the least and most likely to get hit?
  rl=: 3 : '(] , +/) 1+ (?, ?)6' NB. random roll
  n=:1e5 NB. how many rolls to sample
  sr=:rl"0] i.n NB. sampled rolls
  samples=:{{(+/ % #) y e."1] sr}}"0] 1+i.12
  bars=:'-' #~ ,. <. 100*samples
  ]summary=:('DISTANCE';'HIT %';'AVERAGE TURNS PER HIT';'DOT PLOT'),:(,.1+i.12);(,.samples);(,.10%~>.10* 1%samples);bars
#+end_src

#+RESULTS:
#+begin_example
0.3071 0.33337 0.36183 0.38919 0.41308 0.44632 0.16816 0.13913 0.10861 0.08464 0.05402 0.02795

┌────────┬───────┬─────────────────────┬────────────────────────────────────────────┐
│DISTANCE│HIT %  │AVERAGE TURNS PER HIT│DOT PLOT                                    │
├────────┼───────┼─────────────────────┼────────────────────────────────────────────┤
│ 1      │ 0.3071│ 3.3                 │------------------------------              │
│ 2      │0.33337│   3                 │---------------------------------           │
│ 3      │0.36183│ 2.8                 │------------------------------------        │
│ 4      │0.38919│ 2.6                 │--------------------------------------      │
│ 5      │0.41308│ 2.5                 │-----------------------------------------   │
│ 6      │0.44632│ 2.3                 │--------------------------------------------│
│ 7      │0.16816│   6                 │----------------                            │
│ 8      │0.13913│ 7.2                 │-------------                               │
│ 9      │0.10861│ 9.3                 │----------                                  │
│10      │0.08464│11.9                 │--------                                    │
│11      │0.05402│18.6                 │-----                                       │
│12      │0.02795│35.8                 │--                                          │
└────────┴───────┴─────────────────────┴────────────────────────────────────────────┘
#+end_example

*** Spot betting sim
Set odds, real odds, and profit target. Keep increasing bets accordingly until profit target is reached.

#+begin_src J :exports both
  odds=:10
  realOdds=:odds*1.1
  profitTarget=:10
  init_variables=: 3 : 0
  'nthBet cumInvest cumReturn cumProfit'=:0 NB. initialize variables
  tableHeadings=:'nthBet';'invest';'cumInvest';'return';'cumReturn';'profit';'cumProfit'
  summaryTable=:tableHeadings
  )
  fWin =: 3 : '(1%y)<:~?0' NB. 1 if bet wins else 0. y is realOdds
  fInvest =: 3 : 0
  nthBet=:nthBet+1
  invest=:(profitTarget-cumProfit)%odds-1 NB. get new investment amount for this bet
  betWin=. fWin realOdds NB. did the bet win or not?
  return=:betWin*invest*odds
  profit=:return-invest
  cumInvest=:cumInvest+invest
  cumReturn=:cumReturn+return
  cumProfit=:cumProfit+profit
  tRows=.nthBet+1
  summaryTable=:(tRows, 7) $ (,summaryTable),(nthBet;invest;cumInvest;return;cumReturn;profit;cumProfit)
  )

  sim=: 3 : 0
  init_variables 1
  while. cumProfit <: 0 do.
  fInvest 1
  end.
  overviewTable=:(2,4) $('nBets';'cumInvest';'cumReturn';'cumProfit'),(nthBet;cumInvest;cumReturn;cumProfit)
  cumInvest
  )

  sim 1
  overviewTable
  summaryTable
#+end_src

#+RESULTS:
#+begin_example
5.24158

┌─────┬─────────┬─────────┬─────────┐
│nBets│cumInvest│cumReturn│cumProfit│
├─────┼─────────┼─────────┼─────────┤
│4    │5.24158  │15.2416  │10       │
└─────┴─────────┴─────────┴─────────┘

┌──────┬───────┬─────────┬───────┬─────────┬────────┬─────────┐
│nthBet│invest │cumInvest│return │cumReturn│profit  │cumProfit│
├──────┼───────┼─────────┼───────┼─────────┼────────┼─────────┤
│1     │1.11111│1.11111  │0      │0        │_1.11111│_1.11111 │
├──────┼───────┼─────────┼───────┼─────────┼────────┼─────────┤
│2     │1.23457│2.34568  │0      │0        │_1.23457│_2.34568 │
├──────┼───────┼─────────┼───────┼─────────┼────────┼─────────┤
│3     │1.37174│3.71742  │0      │0        │_1.37174│_3.71742 │
├──────┼───────┼─────────┼───────┼─────────┼────────┼─────────┤
│4     │1.52416│5.24158  │15.2416│15.2416  │13.7174 │10       │
└──────┴───────┴─────────┴───────┴─────────┴────────┴─────────┘
#+end_example

*** Darts checkouts
Show all quickest possible checkouts. E.g. 40 show d20 do not show 10 6 d12.


#+begin_src J :exports both
  s=:\:~ 0,25,1+i.20
  d=:\:~50,2*1+i.20
  t=:\:~3*1+i.20
  
  NB. every single possible 3 dart checkout of ? ? d
  co3=:|. each , { d;(~. s,d,t);(~. s,d,t)
  ap=: 3 : 'temp2#~ >-.@:>/@:}: each temp2=:}: each ~. temp{~I.> (y = {:) each] temp=:,(] , +/) each co3'
  NB. ap 7

  NB. if checkout can occur in 2(1) darts prune out all 3(2) dart candidates
  prune=: 3 : 0
  nNonZero=.(+/)@:(0&~:) each y
  tmin=. <./ ; nNonZero
  keepers=.; tmin&= each nNonZero
  keepers # y
  )
  NB. ,.(<@:prune@:ap)"0] 7 8 11 16
  (7;8;11;16;40;50) ,. ,.(<@:prune@:ap)"0] 7 8 11 16 40 50

#+end_src

#+RESULTS:
#+begin_example
┌──┬────────────────────────────────┐
│7 │┌─────┬─────┬─────┐             │
│  ││0 1 6│0 3 4│0 5 2│             │
│  │└─────┴─────┴─────┘             │
├──┼────────────────────────────────┤
│8 │┌─────┐                         │
│  ││0 0 8│                         │
│  │└─────┘                         │
├──┼────────────────────────────────┤
│11│┌──────┬─────┬─────┬─────┬─────┐│
│  ││0 1 10│0 3 8│0 5 6│0 7 4│0 9 2││
│  │└──────┴─────┴─────┴─────┴─────┘│
├──┼────────────────────────────────┤
│16│┌──────┐                        │
│  ││0 0 16│                        │
│  │└──────┘                        │
├──┼────────────────────────────────┤
│40│┌──────┐                        │
│  ││0 0 40│                        │
│  │└──────┘                        │
├──┼────────────────────────────────┤
│50│┌──────┐                        │
│  ││0 0 50│                        │
│  │└──────┘                        │
└──┴────────────────────────────────┘
#+end_example



** Advanced Examples
